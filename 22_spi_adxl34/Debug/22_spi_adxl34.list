
22_spi_adxl34.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000534  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006dc  080006e4  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006dc  080006dc  000106e4  2**0
                  CONTENTS
  4 .ARM          00000000  080006dc  080006dc  000106e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006dc  080006e4  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006dc  080006dc  000106dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106e4  2**0
                  CONTENTS
 10 .bss          00000038  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007ea  00000000  00000000  00010714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e3  00000000  00000000  00010efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000111e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000088  00000000  00000000  000112a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190cb  00000000  00000000  00011330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012b0  00000000  00000000  0002a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b94f  00000000  00000000  0002b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b6ffa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001ac  00000000  00000000  000b704c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080006c4 	.word	0x080006c4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080006c4 	.word	0x080006c4

080001e8 <adxl_read>:

#define MULTI_BYTE_EN   0x40
#define READ_OPERATION  0x80

void adxl_read(uint8_t address, uint8_t* rxdata)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];

	/* Set read operation  */
	address |= READ_OPERATION;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	71fb      	strb	r3, [r7, #7]

	/*Enable multi-byte */
	address |= MULTI_BYTE_EN;
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000204:	b2db      	uxtb	r3, r3
 8000206:	71fb      	strb	r3, [r7, #7]

	/*Pull cs line low to enable slave	 */
	cs_enable();
 8000208:	f000 f9ee 	bl	80005e8 <cs_enable>

	/*Send address */
	spi1_transmit(&address, 1);
 800020c:	1dfb      	adds	r3, r7, #7
 800020e:	2101      	movs	r1, #1
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f98b 	bl	800052c <spi1_transmit>

	/*Read 6 byte */
	spi1_receive(rxdata, 6);
 8000216:	2106      	movs	r1, #6
 8000218:	6838      	ldr	r0, [r7, #0]
 800021a:	f000 f9bf 	bl	800059c <spi1_receive>

	/* Pull cs line high to disable slave */
	cs_disable();
 800021e:	f000 f9f3 	bl	8000608 <cs_disable>

}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <adxl_write>:

void adxl_write(uint8_t address, char value)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b084      	sub	sp, #16
 800022e:	af00      	add	r7, sp, #0
 8000230:	4603      	mov	r3, r0
 8000232:	460a      	mov	r2, r1
 8000234:	71fb      	strb	r3, [r7, #7]
 8000236:	4613      	mov	r3, r2
 8000238:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];

	/*Enable multi-byte */
	data[0] = address | MULTI_BYTE_EN;
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000240:	b2db      	uxtb	r3, r3
 8000242:	733b      	strb	r3, [r7, #12]

	/*Place data into buffer */
	data[1] = value;
 8000244:	79bb      	ldrb	r3, [r7, #6]
 8000246:	737b      	strb	r3, [r7, #13]

	/*Pull cs line low to enable slave	 */
	cs_enable();
 8000248:	f000 f9ce 	bl	80005e8 <cs_enable>

	/* Transmit data and address */
	spi1_transmit(data, 2);
 800024c:	f107 030c 	add.w	r3, r7, #12
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f96a 	bl	800052c <spi1_transmit>

	/* Pull cs line high to disable slave */
	cs_disable();
 8000258:	f000 f9d6 	bl	8000608 <cs_disable>
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <adxl_init>:

void adxl_init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	/*Enable SPI gpio */
	SPI_Gpio_init();
 8000268:	f000 f874 	bl	8000354 <SPI_Gpio_init>

	/*Config SPI */
	Spi_config();
 800026c:	f000 f904 	bl	8000478 <Spi_config>

	/*Set data format range to +-4g*/
	adxl_write(DATA_FORMAT_R, FOUR_G);
 8000270:	2101      	movs	r1, #1
 8000272:	2031      	movs	r0, #49	; 0x31
 8000274:	f7ff ffd9 	bl	800022a <adxl_write>

	/*Reset all bits*/
	adxl_write(POWER_CTL_R, RESET);
 8000278:	2100      	movs	r1, #0
 800027a:	202d      	movs	r0, #45	; 0x2d
 800027c:	f7ff ffd5 	bl	800022a <adxl_write>

	/*Configure power control measure bit*/
	adxl_write(POWER_CTL_R, SET_MEASURE_B);
 8000280:	2108      	movs	r1, #8
 8000282:	202d      	movs	r0, #45	; 0x2d
 8000284:	f7ff ffd1 	bl	800022a <adxl_write>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}

0800028c <main>:
uint8_t data_rec[6];

const float FOUR_G_SCALE_FACT = 0.0078;

int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	adxl_init();
 8000290:	f7ff ffe8 	bl	8000264 <adxl_init>

	while(1)
	{
		adxl_read(DATA_START_ADDR,data_rec);
 8000294:	4927      	ldr	r1, [pc, #156]	; (8000334 <main+0xa8>)
 8000296:	2032      	movs	r0, #50	; 0x32
 8000298:	f7ff ffa6 	bl	80001e8 <adxl_read>

		x = ((data_rec[1]<<8) | data_rec[0]);
 800029c:	4b25      	ldr	r3, [pc, #148]	; (8000334 <main+0xa8>)
 800029e:	785b      	ldrb	r3, [r3, #1]
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	b21a      	sxth	r2, r3
 80002a4:	4b23      	ldr	r3, [pc, #140]	; (8000334 <main+0xa8>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	b21b      	sxth	r3, r3
 80002aa:	4313      	orrs	r3, r2
 80002ac:	b21a      	sxth	r2, r3
 80002ae:	4b22      	ldr	r3, [pc, #136]	; (8000338 <main+0xac>)
 80002b0:	801a      	strh	r2, [r3, #0]
		y = ((data_rec[3]<<8) | data_rec[2]);
 80002b2:	4b20      	ldr	r3, [pc, #128]	; (8000334 <main+0xa8>)
 80002b4:	78db      	ldrb	r3, [r3, #3]
 80002b6:	021b      	lsls	r3, r3, #8
 80002b8:	b21a      	sxth	r2, r3
 80002ba:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <main+0xa8>)
 80002bc:	789b      	ldrb	r3, [r3, #2]
 80002be:	b21b      	sxth	r3, r3
 80002c0:	4313      	orrs	r3, r2
 80002c2:	b21a      	sxth	r2, r3
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <main+0xb0>)
 80002c6:	801a      	strh	r2, [r3, #0]
		z = ((data_rec[5]<<8) | data_rec[4]);
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0xa8>)
 80002ca:	795b      	ldrb	r3, [r3, #5]
 80002cc:	021b      	lsls	r3, r3, #8
 80002ce:	b21a      	sxth	r2, r3
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <main+0xa8>)
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	b21b      	sxth	r3, r3
 80002d6:	4313      	orrs	r3, r2
 80002d8:	b21a      	sxth	r2, r3
 80002da:	4b19      	ldr	r3, [pc, #100]	; (8000340 <main+0xb4>)
 80002dc:	801a      	strh	r2, [r3, #0]

		xq = x * FOUR_G_SCALE_FACT;
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <main+0xac>)
 80002e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e4:	ee07 3a90 	vmov	s15, r3
 80002e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000344 <main+0xb8>
 80002f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <main+0xbc>)
 80002f6:	edc3 7a00 	vstr	s15, [r3]
		yq = y * FOUR_G_SCALE_FACT;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <main+0xb0>)
 80002fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000300:	ee07 3a90 	vmov	s15, r3
 8000304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000308:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000344 <main+0xb8>
 800030c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <main+0xc0>)
 8000312:	edc3 7a00 	vstr	s15, [r3]
		zq = z * FOUR_G_SCALE_FACT;
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <main+0xb4>)
 8000318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800031c:	ee07 3a90 	vmov	s15, r3
 8000320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000324:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000344 <main+0xb8>
 8000328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <main+0xc4>)
 800032e:	edc3 7a00 	vstr	s15, [r3]
		adxl_read(DATA_START_ADDR,data_rec);
 8000332:	e7af      	b.n	8000294 <main+0x8>
 8000334:	20000030 	.word	0x20000030
 8000338:	2000001c 	.word	0x2000001c
 800033c:	2000001e 	.word	0x2000001e
 8000340:	20000020 	.word	0x20000020
 8000344:	3bff9724 	.word	0x3bff9724
 8000348:	20000024 	.word	0x20000024
 800034c:	20000028 	.word	0x20000028
 8000350:	2000002c 	.word	0x2000002c

08000354 <SPI_Gpio_init>:
#define SR_TXE    (1U<<1)
#define SR_RXNE   (1U<<0)
#define SR_BSY    (1U<<7)

void SPI_Gpio_init()
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000358:	4b44      	ldr	r3, [pc, #272]	; (800046c <SPI_Gpio_init+0x118>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a43      	ldr	r2, [pc, #268]	; (800046c <SPI_Gpio_init+0x118>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOEEN;
 8000364:	4b41      	ldr	r3, [pc, #260]	; (800046c <SPI_Gpio_init+0x118>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a40      	ldr	r2, [pc, #256]	; (800046c <SPI_Gpio_init+0x118>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6313      	str	r3, [r2, #48]	; 0x30


	//Set PA5, PA6, PA7 for SPI

	//PA5
	GPIOA->MODER &=~ (1U<<10);
 8000370:	4b3f      	ldr	r3, [pc, #252]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a3e      	ldr	r2, [pc, #248]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800037a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<11);
 800037c:	4b3c      	ldr	r3, [pc, #240]	; (8000470 <SPI_Gpio_init+0x11c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a3b      	ldr	r2, [pc, #236]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000386:	6013      	str	r3, [r2, #0]
	//PA6
	GPIOA->MODER &=~ (1U<<12);
 8000388:	4b39      	ldr	r3, [pc, #228]	; (8000470 <SPI_Gpio_init+0x11c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a38      	ldr	r2, [pc, #224]	; (8000470 <SPI_Gpio_init+0x11c>)
 800038e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000392:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13);
 8000394:	4b36      	ldr	r3, [pc, #216]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a35      	ldr	r2, [pc, #212]	; (8000470 <SPI_Gpio_init+0x11c>)
 800039a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039e:	6013      	str	r3, [r2, #0]
	//PA7
	GPIOA->MODER &=~ (1U<<14);
 80003a0:	4b33      	ldr	r3, [pc, #204]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a32      	ldr	r2, [pc, #200]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<15);
 80003ac:	4b30      	ldr	r3, [pc, #192]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a2f      	ldr	r2, [pc, #188]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003b6:	6013      	str	r3, [r2, #0]

	//PE3 for SS
	GPIOE->MODER |= (1U<<6);
 80003b8:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <SPI_Gpio_init+0x120>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a2d      	ldr	r2, [pc, #180]	; (8000474 <SPI_Gpio_init+0x120>)
 80003be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &=~ (1U<<7);
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <SPI_Gpio_init+0x120>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a2a      	ldr	r2, [pc, #168]	; (8000474 <SPI_Gpio_init+0x120>)
 80003ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003ce:	6013      	str	r3, [r2, #0]

	//AFR PA5
	GPIOA->AFR[1] |= (1U<<20);
 80003d0:	4b27      	ldr	r3, [pc, #156]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d4:	4a26      	ldr	r2, [pc, #152]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003da:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~ (1U<<21);
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e0:	4a23      	ldr	r2, [pc, #140]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80003e6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<22);
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ec:	4a20      	ldr	r2, [pc, #128]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~ (1U<<23);
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <SPI_Gpio_init+0x11c>)
 80003fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80003fe:	6253      	str	r3, [r2, #36]	; 0x24

	//AFR PA6
	GPIOA->AFR[1] |= (1U<<24);
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000404:	4a1a      	ldr	r2, [pc, #104]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800040a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~ (1U<<25);
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <SPI_Gpio_init+0x11c>)
 800040e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000412:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000416:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<26);
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <SPI_Gpio_init+0x11c>)
 800041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <SPI_Gpio_init+0x11c>)
 800041e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000422:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~ (1U<<27);
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <SPI_Gpio_init+0x11c>)
 800042a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800042e:	6253      	str	r3, [r2, #36]	; 0x24

	//AFR PA7
	GPIOA->AFR[1] |= (1U<<28);
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000434:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~ (1U<<29);
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <SPI_Gpio_init+0x11c>)
 800043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000440:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000442:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000446:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<30);
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <SPI_Gpio_init+0x11c>)
 800044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044c:	4a08      	ldr	r2, [pc, #32]	; (8000470 <SPI_Gpio_init+0x11c>)
 800044e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000452:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~ (1U<<31);
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <SPI_Gpio_init+0x11c>)
 8000456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000458:	4a05      	ldr	r2, [pc, #20]	; (8000470 <SPI_Gpio_init+0x11c>)
 800045a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800045e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40023800 	.word	0x40023800
 8000470:	40020000 	.word	0x40020000
 8000474:	40021000 	.word	0x40021000

08000478 <Spi_config>:

void Spi_config()
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	//Enable access clock to SPI1
	RCC->APB2ENR |= SPI_EN;
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <Spi_config+0xac>)
 800047e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000480:	4a28      	ldr	r2, [pc, #160]	; (8000524 <Spi_config+0xac>)
 8000482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000486:	6453      	str	r3, [r2, #68]	; 0x44

	//Set clock fclk/4
	SPI1->CR1 |= (1U<<3);
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <Spi_config+0xb0>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <Spi_config+0xb0>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<4);
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <Spi_config+0xb0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a23      	ldr	r2, [pc, #140]	; (8000528 <Spi_config+0xb0>)
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<5);
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <Spi_config+0xb0>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a20      	ldr	r2, [pc, #128]	; (8000528 <Spi_config+0xb0>)
 80004a6:	f023 0320 	bic.w	r3, r3, #32
 80004aa:	6013      	str	r3, [r2, #0]

	//Set CPOL to 1 and CPHA to 1
	SPI1->CR1 |= (1U<<0);
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <Spi_config+0xb0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <Spi_config+0xb0>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<1);
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <Spi_config+0xb0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <Spi_config+0xb0>)
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	6013      	str	r3, [r2, #0]

	//Enable full duplex
	SPI1->CR1 &=~ (1U<<10);
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <Spi_config+0xb0>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <Spi_config+0xb0>)
 80004ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004ce:	6013      	str	r3, [r2, #0]

	//Set MSB first
	SPI1->CR1 &=~ (1U<<7);
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <Spi_config+0xb0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <Spi_config+0xb0>)
 80004d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004da:	6013      	str	r3, [r2, #0]

	//Set mode to MASTER
	SPI1->CR1 |= (1U<<2);
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <Spi_config+0xb0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <Spi_config+0xb0>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6013      	str	r3, [r2, #0]

	//Set 8 bit data mode
	SPI1->CR1 &=~ (1U<<11);
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <Spi_config+0xb0>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <Spi_config+0xb0>)
 80004ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004f2:	6013      	str	r3, [r2, #0]

	//Software slave management setting by SSM = 1, SSI = 1
	SPI1->CR1 |= (1U<<8);
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <Spi_config+0xb0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <Spi_config+0xb0>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<9);
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <Spi_config+0xb0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <Spi_config+0xb0>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]

	//Enable SPI Module
	SPI1->CR1 |= (1U<<6);
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <Spi_config+0xb0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <Spi_config+0xb0>)
 8000512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000516:	6013      	str	r3, [r2, #0]

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800
 8000528:	40013000 	.word	0x40013000

0800052c <spi1_transmit>:

void spi1_transmit(uint8_t *data, uint32_t size)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
	uint8_t temp;

	while(i<size)
 800053a:	e00f      	b.n	800055c <spi1_transmit+0x30>
	{
		//Wait until TXE is set
		while(! (SPI1->SR & (SR_TXE))) { }
 800053c:	bf00      	nop
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <spi1_transmit+0x6c>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0f9      	beq.n	800053e <spi1_transmit+0x12>

		//Write the data to the data register
		SPI1->DR = data[i];
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4413      	add	r3, r2
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <spi1_transmit+0x6c>)
 8000554:	60da      	str	r2, [r3, #12]
		i++;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3301      	adds	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
	while(i<size)
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3eb      	bcc.n	800053c <spi1_transmit+0x10>
	}

	//Wait until TXE is set
	while(! (SPI1->SR & (SR_TXE))) { }
 8000564:	bf00      	nop
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <spi1_transmit+0x6c>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f9      	beq.n	8000566 <spi1_transmit+0x3a>

	//Wait for BUSY flag to reset
	while(!(SPI1->SR & (SR_BSY))) { }
 8000572:	bf00      	nop
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <spi1_transmit+0x6c>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f9      	beq.n	8000574 <spi1_transmit+0x48>

	//Cleaer OVR flag BY READ OPERATİON
	temp = SPI1->DR;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <spi1_transmit+0x6c>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	72fb      	strb	r3, [r7, #11]
	temp = SPI1->SR;
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <spi1_transmit+0x6c>)
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	72fb      	strb	r3, [r7, #11]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40013000 	.word	0x40013000

0800059c <spi1_receive>:

void spi1_receive(uint8_t *data, uint32_t size)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	while(size)
 80005a6:	e013      	b.n	80005d0 <spi1_receive+0x34>
	{
		//Send dummy data
		SPI1->DR = 0;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <spi1_receive+0x48>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]

		//Wait for RXNE flag to be set
		while(!(SPI1->SR & (SR_RXNE))) { }
 80005ae:	bf00      	nop
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <spi1_receive+0x48>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f9      	beq.n	80005b0 <spi1_receive+0x14>

		//Read data from data register
		*data++ = (SPI1->DR);
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <spi1_receive+0x48>)
 80005be:	68d9      	ldr	r1, [r3, #12]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	607a      	str	r2, [r7, #4]
 80005c6:	b2ca      	uxtb	r2, r1
 80005c8:	701a      	strb	r2, [r3, #0]
		size--;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
	while(size)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1e8      	bne.n	80005a8 <spi1_receive+0xc>
	}
}
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40013000 	.word	0x40013000

080005e8 <cs_enable>:

/*Pull low to enable */
void cs_enable()
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	GPIOE->ODR &=~(1U<<3);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <cs_enable+0x1c>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <cs_enable+0x1c>)
 80005f2:	f023 0308 	bic.w	r3, r3, #8
 80005f6:	6153      	str	r3, [r2, #20]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <cs_disable>:

/*Pull high to disable */
void cs_disable()
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	GPIOE->ODR |= (1U<<3);
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <cs_disable+0x1c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <cs_disable+0x1c>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6153      	str	r3, [r2, #20]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800062c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000656:	f000 f811 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fe17 	bl	800028c <main>

0800065e <LoopForever>:

LoopForever:
    b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   r0, =_estack
 8000660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800066c:	080006e4 	.word	0x080006e4
  ldr r2, =_sbss
 8000670:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000674:	20000038 	.word	0x20000038

08000678 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC_IRQHandler>
	...

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	; (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	; (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	; (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	; (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 f818 	bl	80006c4 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	080006dc 	.word	0x080006dc
 80006b8:	080006dc 	.word	0x080006dc
 80006bc:	080006dc 	.word	0x080006dc
 80006c0:	080006e0 	.word	0x080006e0

080006c4 <_init>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr

080006d0 <_fini>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr
