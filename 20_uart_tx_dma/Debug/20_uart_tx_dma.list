
20_uart_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000578  08000578  00010578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000598  08000598  000105a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000598  08000598  000105a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000598  080005a0  000105a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000598  08000598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080005a0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005a0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000dd5  00000000  00000000  000105d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003bf  00000000  00000000  000113a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebc9  00000000  00000000  000118c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e23  00000000  00000000  00020489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053c9a  00000000  00000000  000212ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074f46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  00074f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000560 	.word	0x08000560

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000560 	.word	0x08000560

080001d8 <main>:
uint32_t dma_ty;

static void uart_callback(void);

int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
	char message[31] = "Hello from Stm32 DMA transfer\n\r";
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <main+0x54>)
 80001e0:	463c      	mov	r4, r7
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001ec:	c407      	stmia	r4!, {r0, r1, r2}
 80001ee:	8023      	strh	r3, [r4, #0]
 80001f0:	3402      	adds	r4, #2
 80001f2:	0c1b      	lsrs	r3, r3, #16
 80001f4:	7023      	strb	r3, [r4, #0]

	RCC->AHB1ENR |= GPIODEN;
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <main+0x58>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fa:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <main+0x58>)
 80001fc:	f043 0308 	orr.w	r3, r3, #8
 8000200:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1U<<30);
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <main+0x5c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <main+0x5c>)
 8000208:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800020c:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~ (1U<<31);
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x5c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <main+0x5c>)
 8000214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000218:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 800021a:	f000 f8e1 	bl	80003e0 <uart2_tx_init>
	dma1_stream6_init((uint32_t)message, (uint32_t) &USART2->DR, 31);
 800021e:	463b      	mov	r3, r7
 8000220:	221f      	movs	r2, #31
 8000222:	4905      	ldr	r1, [pc, #20]	; (8000238 <main+0x60>)
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f851 	bl	80002cc <dma1_stream6_init>

	while(1)
 800022a:	e7fe      	b.n	800022a <main+0x52>
 800022c:	08000578 	.word	0x08000578
 8000230:	40023800 	.word	0x40023800
 8000234:	40020c00 	.word	0x40020c00
 8000238:	40004404 	.word	0x40004404

0800023c <dma_callback>:

	}
}

static void dma_callback(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	GPIOD->ODR |= LED_PIN;
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <dma_callback+0x1c>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <dma_callback+0x1c>)
 8000246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800024a:	6153      	str	r3, [r2, #20]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40020c00 	.word	0x40020c00

0800025c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	/*Check for transfer complate interrupt*/
	if(DMA1->HISR & HISR_TCIF)
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <DMA1_Stream6_IRQHandler+0x2c>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00b      	beq.n	8000284 <DMA1_Stream6_IRQHandler+0x28>
	{
		/*Clear flag*/
		DMA1->HIFCR |= HIFCR_CTCIF6;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <DMA1_Stream6_IRQHandler+0x2c>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a05      	ldr	r2, [pc, #20]	; (8000288 <DMA1_Stream6_IRQHandler+0x2c>)
 8000272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000276:	60d3      	str	r3, [r2, #12]
	    dma_ty = DMA1->HIFCR;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <DMA1_Stream6_IRQHandler+0x2c>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <DMA1_Stream6_IRQHandler+0x30>)
 800027e:	6013      	str	r3, [r2, #0]
		/*do something*/
		dma_callback();
 8000280:	f7ff ffdc 	bl	800023c <dma_callback>
	}
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40026000 	.word	0x40026000
 800028c:	2000001c 	.word	0x2000001c

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <dma1_stream6_init>:
	uart2_write(ch);
	return ch;
}

void dma1_stream6_init(uint32_t src, uint32_t dest, uint32_t len)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
	/*Enable clock access to DMA */
	RCC->AHB1ENR |= DMA1EN;
 80002d8:	4b3b      	ldr	r3, [pc, #236]	; (80003c8 <dma1_stream6_init+0xfc>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a3a      	ldr	r2, [pc, #232]	; (80003c8 <dma1_stream6_init+0xfc>)
 80002de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable DMA1 stream6 */
	DMA1_Stream6->CR &=~ DMA_CR_EN;
 80002e4:	4b39      	ldr	r3, [pc, #228]	; (80003cc <dma1_stream6_init+0x100>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a38      	ldr	r2, [pc, #224]	; (80003cc <dma1_stream6_init+0x100>)
 80002ea:	f023 0301 	bic.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]

	/*wait until DMA1 Stream 6 is disabled*/
	while(DMA1_Stream6->CR & DMA_CR_EN) {}
 80002f0:	bf00      	nop
 80002f2:	4b36      	ldr	r3, [pc, #216]	; (80003cc <dma1_stream6_init+0x100>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1f9      	bne.n	80002f2 <dma1_stream6_init+0x26>

	/*Clear all interrupt flag */
	DMA1->HIFCR |= (1U<<16);
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <dma1_stream6_init+0x104>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	4a33      	ldr	r2, [pc, #204]	; (80003d0 <dma1_stream6_init+0x104>)
 8000304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000308:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<18);
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <dma1_stream6_init+0x104>)
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	4a30      	ldr	r2, [pc, #192]	; (80003d0 <dma1_stream6_init+0x104>)
 8000310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000314:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<19);
 8000316:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <dma1_stream6_init+0x104>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <dma1_stream6_init+0x104>)
 800031c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000320:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<20);
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <dma1_stream6_init+0x104>)
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	4a2a      	ldr	r2, [pc, #168]	; (80003d0 <dma1_stream6_init+0x104>)
 8000328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800032c:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<21);
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <dma1_stream6_init+0x104>)
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	4a27      	ldr	r2, [pc, #156]	; (80003d0 <dma1_stream6_init+0x104>)
 8000334:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000338:	60d3      	str	r3, [r2, #12]

	DMA1_Stream6->CR |= DMA_PFCTRL;
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <dma1_stream6_init+0x100>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a23      	ldr	r2, [pc, #140]	; (80003cc <dma1_stream6_init+0x100>)
 8000340:	f043 0320 	orr.w	r3, r3, #32
 8000344:	6013      	str	r3, [r2, #0]

	/*Set circular mode*/
	DMA1_Stream6->CR |= DMA_CIRC;
 8000346:	4b21      	ldr	r3, [pc, #132]	; (80003cc <dma1_stream6_init+0x100>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a20      	ldr	r2, [pc, #128]	; (80003cc <dma1_stream6_init+0x100>)
 800034c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000350:	6013      	str	r3, [r2, #0]

	/*Set the dest buffer */
	DMA1_Stream6->PAR = dest;
 8000352:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <dma1_stream6_init+0x100>)
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6093      	str	r3, [r2, #8]
	dma_dst = dest;
 8000358:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <dma1_stream6_init+0x108>)
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	6013      	str	r3, [r2, #0]
	 /* Set the source buffer */
	DMA1_Stream6->M0AR = src;
 800035e:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <dma1_stream6_init+0x100>)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	60d3      	str	r3, [r2, #12]
	dma_src = src;
 8000364:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <dma1_stream6_init+0x10c>)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	6013      	str	r3, [r2, #0]

	/*Set length */
	DMA1_Stream6->NDTR = len;
 800036a:	4a18      	ldr	r2, [pc, #96]	; (80003cc <dma1_stream6_init+0x100>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6053      	str	r3, [r2, #4]

	/*Select stream6 CH4 */
	DMA1_Stream6->CR = CHSEL4;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <dma1_stream6_init+0x100>)
 8000372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000376:	601a      	str	r2, [r3, #0]

	/*Enable memory increment */
	DMA1_Stream6->CR |= DMA_MEM_INC;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <dma1_stream6_init+0x100>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <dma1_stream6_init+0x100>)
 800037e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000382:	6013      	str	r3, [r2, #0]

	/* Configure transfer direction */
	DMA1_Stream6->CR |= DMA_DIR_MEM_TO_PER;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <dma1_stream6_init+0x100>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a10      	ldr	r2, [pc, #64]	; (80003cc <dma1_stream6_init+0x100>)
 800038a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800038e:	6013      	str	r3, [r2, #0]

	/*Enable DMA transfer complate interrupt*/
	DMA1_Stream6->CR |= DMA_CR_TCIE;
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <dma1_stream6_init+0x100>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <dma1_stream6_init+0x100>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6013      	str	r3, [r2, #0]

	/* Enable direct mode and disasble FIFO */
	DMA1_Stream6->FCR = 0;
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <dma1_stream6_init+0x100>)
 800039e:	2200      	movs	r2, #0
 80003a0:	615a      	str	r2, [r3, #20]

	/*Enable DMA1 Stream6 */
	DMA1_Stream6->CR |= DMA_CR_EN;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <dma1_stream6_init+0x100>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a09      	ldr	r2, [pc, #36]	; (80003cc <dma1_stream6_init+0x100>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6013      	str	r3, [r2, #0]

	/* Enable UART2 transmitter DMA */
	USART2->CR3 |= UART_CR3_DMAT;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <dma1_stream6_init+0x110>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <dma1_stream6_init+0x110>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b8:	6153      	str	r3, [r2, #20]

	/* DMA ınterrupt enable in NVIC */
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80003ba:	2011      	movs	r0, #17
 80003bc:	f7ff ff68 	bl	8000290 <__NVIC_EnableIRQ>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40023800 	.word	0x40023800
 80003cc:	400260a0 	.word	0x400260a0
 80003d0:	40026000 	.word	0x40026000
 80003d4:	20000020 	.word	0x20000020
 80003d8:	20000024 	.word	0x20000024
 80003dc:	40004400 	.word	0x40004400

080003e0 <uart2_tx_init>:
	 USART2->CR1 |= CR1_UE;

}

void uart2_tx_init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80003e4:	4b20      	ldr	r3, [pc, #128]	; (8000468 <uart2_tx_init+0x88>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <uart2_tx_init+0x88>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <uart2_tx_init+0x8c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1d      	ldr	r2, [pc, #116]	; (800046c <uart2_tx_init+0x8c>)
 80003f6:	f023 0310 	bic.w	r3, r3, #16
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <uart2_tx_init+0x8c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <uart2_tx_init+0x8c>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <uart2_tx_init+0x8c>)
 800040a:	6a1b      	ldr	r3, [r3, #32]
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <uart2_tx_init+0x8c>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000412:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <uart2_tx_init+0x8c>)
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	4a14      	ldr	r2, [pc, #80]	; (800046c <uart2_tx_init+0x8c>)
 800041a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <uart2_tx_init+0x8c>)
 8000422:	6a1b      	ldr	r3, [r3, #32]
 8000424:	4a11      	ldr	r2, [pc, #68]	; (800046c <uart2_tx_init+0x8c>)
 8000426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800042a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <uart2_tx_init+0x8c>)
 800042e:	6a1b      	ldr	r3, [r3, #32]
 8000430:	4a0e      	ldr	r2, [pc, #56]	; (800046c <uart2_tx_init+0x8c>)
 8000432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000436:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <uart2_tx_init+0x88>)
 800043a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800043c:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <uart2_tx_init+0x88>)
 800043e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000442:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000448:	4909      	ldr	r1, [pc, #36]	; (8000470 <uart2_tx_init+0x90>)
 800044a:	480a      	ldr	r0, [pc, #40]	; (8000474 <uart2_tx_init+0x94>)
 800044c:	f000 f814 	bl	8000478 <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  CR1_TE;
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <uart2_tx_init+0x94>)
 8000452:	2208      	movs	r2, #8
 8000454:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <uart2_tx_init+0x94>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	4a06      	ldr	r2, [pc, #24]	; (8000474 <uart2_tx_init+0x94>)
 800045c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000460:	60d3      	str	r3, [r2, #12]
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40023800 	.word	0x40023800
 800046c:	40020000 	.word	0x40020000
 8000470:	00f42400 	.word	0x00f42400
 8000474:	40004400 	.word	0x40004400

08000478 <uart_set_baudrate>:
	  /*Write to transmit data register*/
		USART2->DR	=  (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	68b8      	ldr	r0, [r7, #8]
 8000488:	f000 f808 	bl	800049c <compute_uart_bd>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	609a      	str	r2, [r3, #8]
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	085a      	lsrs	r2, r3, #1
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	441a      	add	r2, r3
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b4:	b29b      	uxth	r3, r3

}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	480d      	ldr	r0, [pc, #52]	; (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	; (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	; (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f000 f811 	bl	8000518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff fe6f 	bl	80001d8 <main>

080004fa <LoopForever>:

LoopForever:
  b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   r0, =_estack
 80004fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000508:	080005a0 	.word	0x080005a0
  ldr r2, =_sbss
 800050c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000510:	20000028 	.word	0x20000028

08000514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_IRQHandler>
	...

08000518 <__libc_init_array>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	4d0d      	ldr	r5, [pc, #52]	; (8000550 <__libc_init_array+0x38>)
 800051c:	4c0d      	ldr	r4, [pc, #52]	; (8000554 <__libc_init_array+0x3c>)
 800051e:	1b64      	subs	r4, r4, r5
 8000520:	10a4      	asrs	r4, r4, #2
 8000522:	2600      	movs	r6, #0
 8000524:	42a6      	cmp	r6, r4
 8000526:	d109      	bne.n	800053c <__libc_init_array+0x24>
 8000528:	4d0b      	ldr	r5, [pc, #44]	; (8000558 <__libc_init_array+0x40>)
 800052a:	4c0c      	ldr	r4, [pc, #48]	; (800055c <__libc_init_array+0x44>)
 800052c:	f000 f818 	bl	8000560 <_init>
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	10a4      	asrs	r4, r4, #2
 8000534:	2600      	movs	r6, #0
 8000536:	42a6      	cmp	r6, r4
 8000538:	d105      	bne.n	8000546 <__libc_init_array+0x2e>
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000540:	4798      	blx	r3
 8000542:	3601      	adds	r6, #1
 8000544:	e7ee      	b.n	8000524 <__libc_init_array+0xc>
 8000546:	f855 3b04 	ldr.w	r3, [r5], #4
 800054a:	4798      	blx	r3
 800054c:	3601      	adds	r6, #1
 800054e:	e7f2      	b.n	8000536 <__libc_init_array+0x1e>
 8000550:	08000598 	.word	0x08000598
 8000554:	08000598 	.word	0x08000598
 8000558:	08000598 	.word	0x08000598
 800055c:	0800059c 	.word	0x0800059c

08000560 <_init>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr

0800056c <_fini>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr
